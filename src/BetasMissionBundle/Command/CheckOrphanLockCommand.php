<?php

namespace BetasMissionBundle\Command;

use BetasMissionBundle\Helper\Locker;
use BetasMissionBundle\MailType\OrphanLockMessage;
use DateTime;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class CheckOrphanLockCommand
 */
class CheckOrphanLockCommand extends AbstractCommand
{
    
    /**
     * Configure
     */
    protected function configure()
    {
        $this->setName('betasmission:check-orphan-lock')
            ->setDescription('Check if scripts are not locked');
    }

    /**
     * @return bool|int
     */
    public function execute(InputInterface $input, OutputInterface $outputInterface)
    {
        $tempFiles = scandir(Locker::LOCK_PATH);

        foreach ($tempFiles as $tempFile) {
            if (strpos($tempFile, Locker::LOCK_FILE) === false) {
                continue;
            }

            $lockFileTimeStamp = $this->getTimeStampLock(Locker::LOCK_PATH . $tempFile);
            if ($lockFileTimeStamp != 0 && (new DateTime('now'))->getTimestamp() > $lockFileTimeStamp + 3600) {
                $this->sendAlert($tempFile, (new DateTime('now'))->setTimestamp($lockFileTimeStamp));
                return 1;
            }
        }

        return 0;
    }

    public function postExecute()
    {
        return parent::postExecute(); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $tempFile
     *
     * @return int
     */
    public function getTimeStampLock($tempFile)
    {
        return file_exists($tempFile) ? filectime($tempFile) : 0;
    }

    /**
     * @return int
     */
    public function sendAlert($tempFile, DateTime $sinceWhen)
    {
        return $this->getContainer()->get('betasmission.mailer')->send((new OrphanLockMessage($tempFile, $sinceWhen))->getMessage());
    }
}
